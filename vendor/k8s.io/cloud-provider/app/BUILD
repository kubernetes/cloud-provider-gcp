load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "app",
    srcs = [
        "builder.go",
        "controllermanager.go",
        "core.go",
        "webhook_metrics.go",
        "webhooks.go",
    ],
    importmap = "k8s.io/cloud-provider-gcp/vendor/k8s.io/cloud-provider/app",
    importpath = "k8s.io/cloud-provider/app",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/github.com/spf13/cobra",
        "//vendor/k8s.io/api/admission/v1:admission",
        "//vendor/k8s.io/api/core/v1:core",
        "//vendor/k8s.io/apimachinery/pkg/runtime",
        "//vendor/k8s.io/apimachinery/pkg/runtime/serializer",
        "//vendor/k8s.io/apimachinery/pkg/util/runtime",
        "//vendor/k8s.io/apimachinery/pkg/util/sets",
        "//vendor/k8s.io/apimachinery/pkg/util/uuid",
        "//vendor/k8s.io/apimachinery/pkg/util/wait",
        "//vendor/k8s.io/apiserver/pkg/server/healthz",
        "//vendor/k8s.io/apiserver/pkg/server/mux",
        "//vendor/k8s.io/apiserver/pkg/util/feature",
        "//vendor/k8s.io/client-go/discovery/cached/memory",
        "//vendor/k8s.io/client-go/informers",
        "//vendor/k8s.io/client-go/kubernetes/typed/core/v1:core",
        "//vendor/k8s.io/client-go/metadata",
        "//vendor/k8s.io/client-go/metadata/metadatainformer",
        "//vendor/k8s.io/client-go/restmapper",
        "//vendor/k8s.io/client-go/tools/leaderelection",
        "//vendor/k8s.io/client-go/tools/leaderelection/resourcelock",
        "//vendor/k8s.io/cloud-provider",
        "//vendor/k8s.io/cloud-provider/app/config",
        "//vendor/k8s.io/cloud-provider/controllers/node",
        "//vendor/k8s.io/cloud-provider/controllers/nodelifecycle",
        "//vendor/k8s.io/cloud-provider/controllers/route",
        "//vendor/k8s.io/cloud-provider/controllers/service",
        "//vendor/k8s.io/cloud-provider/names",
        "//vendor/k8s.io/cloud-provider/options",
        "//vendor/k8s.io/component-base/cli/flag",
        "//vendor/k8s.io/component-base/cli/globalflag",
        "//vendor/k8s.io/component-base/configz",
        "//vendor/k8s.io/component-base/logs",
        "//vendor/k8s.io/component-base/logs/api/v1:api",
        "//vendor/k8s.io/component-base/metrics",
        "//vendor/k8s.io/component-base/metrics/features",
        "//vendor/k8s.io/component-base/metrics/legacyregistry",
        "//vendor/k8s.io/component-base/metrics/prometheus/controllers",
        "//vendor/k8s.io/component-base/metrics/prometheus/slis",
        "//vendor/k8s.io/component-base/term",
        "//vendor/k8s.io/component-base/version",
        "//vendor/k8s.io/component-base/version/verflag",
        "//vendor/k8s.io/controller-manager/app",
        "//vendor/k8s.io/controller-manager/controller",
        "//vendor/k8s.io/controller-manager/pkg/clientbuilder",
        "//vendor/k8s.io/controller-manager/pkg/features",
        "//vendor/k8s.io/controller-manager/pkg/healthz",
        "//vendor/k8s.io/controller-manager/pkg/informerfactory",
        "//vendor/k8s.io/controller-manager/pkg/leadermigration",
        "//vendor/k8s.io/klog/v2:klog",
        "//vendor/k8s.io/utils/net",
    ],
)
